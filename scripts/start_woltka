#!/usr/bin/env python

# -----------------------------------------------------------------------------
# Copyright (c) 2020--, The Qiita Development Team.
#
# Distributed under the terms of the BSD 3-clause License.
#
# The full license is in the file LICENSE, distributed with this software.
# -----------------------------------------------------------------------------
import click
from subprocess import run, PIPE
from os.path import dirname

from qp_woltka import plugin
from qp_woltka.woltka import woltka_to_array, woltka_syndna_to_array
from qp_woltka.util import client_connect


@click.command()
@click.argument('url', required=True)
@click.argument('job_id', required=True)
@click.argument('out_dir', required=True)
def execute(url, job_id, out_dir):
    """Executes the task given by job_id and puts the output in output_dir"""
    # there are basically 2 different kinds of jobs: register (commands)
    # and everything else
    if 'register' in job_id:
        plugin(url, job_id, out_dir)
    else:
        qclient = client_connect(url)
        job_info = qclient.get_job_info(job_id)
        command = job_info['command']
        parameters = job_info['parameters']

        # these were defined in qp_woltka/__init.py__ while defining the
        # available commands for this plugin
        valid_commands = [
            'Woltka v0.1.7, paired-end',
            'Remove SynDNA plasmid, insert, & CP026085 reads', 'Calculate Cell Counts',
            'Calculate RNA Copy Counts']

        # this if/elif is the current solution for
        # https://github.com/qiita-spots/qiita/issues/3340
        if command not in valid_commands:
            raise ValueError(f'Not a valid command: "{command}"')
        elif command in {'Calculate Cell Counts', 'Calculate RNA Copy Counts'}:
            plugin(url, job_id, out_dir)
            exit(0)

        qclient.update_job_step(
            job_id, "Step 1 of 4: Collecting info and generating submission")

        artifact_id = parameters['input']
        del parameters['input']
        files, prep = qclient.artifact_and_preparation_files(artifact_id)

        directory = {dirname(ffs['filepath']) for _, fs in files.items()
                     for ffs in fs if ffs is not None}
        if len(directory) != 1:
            msg = ('There is more than one input directory [%s]; please '
                   'contact qiita.help@gmail.com' % str(directory))
            return False, None, msg
        else:
            directory = directory.pop()

        if command.startswith('Woltka v0.1.7'):
            html_summary = qclient.get_artifact_html_summary(artifact_id)
            if html_summary is None:
                raise ValueError(
                    f'`{command}` relies on the artifact html_summary and '
                    f'artifact: {artifact_id} does not have one. Please send '
                    'this message to the help acount.')
            files['html_summary'] = html_summary
            main_fp, merge_fp = woltka_to_array(
                files, out_dir, parameters['Database'], prep, url, job_id)
        else:
            main_fp, merge_fp = woltka_syndna_to_array(
                files, out_dir, parameters['Database'], prep, url, job_id)

        # Submitting jobs and returning id
        main_job = run(['sbatch', main_fp], stdout=PIPE)
        main_job_id = main_job.stdout.decode('utf8').split()[-1]
        merge_job = run(['sbatch', '-d', f'afterok:{main_job_id}',
                         merge_fp], stdout=PIPE)
        merge_job_id = merge_job.stdout.decode('utf8').split()[-1]
        print(f'{main_job_id}, {merge_job_id}')

        qclient.update_job_step(
            job_id, "Step 2 of 4: Aligning sequences")


if __name__ == '__main__':
    execute()
